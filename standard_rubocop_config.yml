require: rubocop-rspec

AllCops:
  TargetRubyVersion: 2.4

# not preferred as this rule makes harder to move/add/remove items
Style/TrailingCommaInArrayLiteral:
  Enabled: false
Style/TrailingCommaInHashLiteral:
  Enabled: false

# change without benefit ( foobar == nil into foobar.nil?)
Style/NilComparison:
  Enabled: false

# single-quoted strings are worse as adding #{} requires changing ' back into "
Style/StringLiterals:
  Enabled: false

# explicit return make easier to avoid subtle bugs on changing function
Style/RedundantReturn:
  Enabled: false

# sometimes it is necessary to use UTF in comment (especially in cases where some special handling is necessary for nonASCII text) 
Style/AsciiComments:
  Enabled: false

# block comments are fine in my opinion
Style/BlockComments:
  Enabled: false

# overcomplicated syntax without benefit
Style/WordArray:
  Enabled: false

# it is likely to detect bugs, there is no point in masking them by running autocorrect
Lint/UnusedMethodArgument:
  AutoCorrect: False
Lint/UnusedBlockArgument:
  AutoCorrect: False

# see https://github.com/bbatsov/rubocop/issues/1747#issuecomment-223370141
# this auto-correct rule may break things and is not a clear improvement
Style/SpecialGlobalVars:
  Enabled: false

# there is no benefit from ugly code of collapsed form
Style/EmptyMethod:
  EnforcedStyle: expanded

# proposed changed code is ugly as hell
# if there is real performance benefit without ugly side-effects
# it should be fixed at language level
# potential investigation should start from
# https://github.com/rubocop-hq/rubocop/commit/864531f61634354570a6b4458cb599c4373659b7
Performance/RegexpMatch:
  Enabled: false
# disable performance cops - in general if something would be a good idea
# from readability view it would be included in Lint group
# It means that typical cop in Performance group will make code LESS readable
# And typically running profiler is much better optimization method than
# making code less readable/more fragile/more confusing
# And again: changes that are truly better should be changed on language level

# this two cops seems to not hurt readability unlike many other performance cops
Performance/UnneededSort:
  #Use `min` instead of `sort.first` etc
  Enabled: true

# see https://github.com/rubocop-hq/rubocop/issues/6637
# "move Performance/LstripRstrip to Lint/LstripRstrip"
Performance/LstripRstrip:
  Description: 'Use `strip` instead of `lstrip.rstrip`.'

# following also seems to be useful
Performance/RedundantBlockCall:
  # Use `yield` instead of `block.call`.
  Enabled: true
Performance/RedundantMatch:
  # Use `=~` instead of `String#match` or `Regexp#match` in a context where the
  # returned `MatchData` is not needed.
  Enabled: true
Performance/RedundantMerge:
  # Use Hash#[]=, rather than Hash#merge! with a single key-value pair.
  Enabled: true
Performance/RedundantSortBy:
  # Use `sort` instead of `sort_by { |x| x }`.
  Enabled: true
Performance/Sample:
  #Use `sample` rather `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.
  Enabled: true
Performance/ChainArrayAllocation:
  # Instead of chaining array methods that allocate new arrays, mutate an
  # existing array.
  Enabled: true

# mass cop disable follows
Performance/StartWith:
  #'Use `start_with?` instead of a regex match anchored to the beginning of a string.'
  Enabled: false
Performance/TimesMap:
  Enabled: false
Performance/UnfreezeString:
  Enabled: false
Performance/UriDefaultParser:
  Enabled: false
Performance/Caller:
  Enabled: false
Performance/CaseWhenSplat:
  Enabled: false
Performance/Casecmp:
  Enabled: false
Performance/CompareWithBlock:
  Enabled: false
Performance/Count:
  Enabled: false
Performance/Detect:
  Enabled: false
Performance/DoubleStartEndWith:
  Enabled: false
Performance/EndWith:
  Enabled: false
Performance/FixedSize:
  Enabled: false
Performance/FlatMap:
  Enabled: false
Performance/InefficientHashSearch:
  Enabled: false
Performance/OpenStruct:
  Enabled: false
Performance/RangeInclude:
  Enabled: false
Performance/Size:
  Enabled: false
Performance/StringReplacement:
  Enabled: false
Performance/ReverseEach:
  Enabled: false
Performance/RegexpMatch:
  Enabled: false

# unconvinced that it is useful
Style/RaiseArgs:
  Enabled: false

# adds useless line without benefit outweighting readability loss
Style/FrozenStringLiteralComment:
  Enabled: false

# Ruby-specific syntax has no benefits whatsover over slashes
# if there is one let me know
Style/RegexpLiteral:
  EnforcedStyle: slashes

# Standard array is much better and less overcomplicated
Style/SymbolArray:
  EnforcedStyle: brackets

# Neither is much better, consistency is much more important
# for example see:
# group = ["#{fish[0]}", "#{fish[0]} filet", "filet z #{fish[1]}"]
# group = [(fish[0]).to_s, "#{fish[0]} filet", "filet z #{fish[1]}"]
Style/UnneededInterpolation:
  Enabled: false

# local style optmization is better than global consistency
Style/StringLiteralsInInterpolation:
  Enabled: false

# this rubyism is not more readable
Style/NumericPredicate:
  Enabled: false

# disable due to bug reported as https://github.com/rubocop-hq/rubocop/issues/6630
Style/CommentAnnotation:
  Enabled: false

# Uncomment following rules to allow using tabs:
#Layout/Tab:
#  Enabled: false

#Layout/IndentationConsistency:
#  Enabled: false

#Layout/IndentationWidth:
#  Enabled: false
