require: rubocop-rspec

AllCops:
  TargetRubyVersion: 2.7
  NewCops: enable

# disabled due to bug reported as https://github.com/rubocop-hq/rubocop/issues/6630
Style/CommentAnnotation:
  Enabled: false

# not preferred as this rule makes harder to move/add/remove items
Style/TrailingCommaInArrayLiteral:
  Enabled: false
Style/TrailingCommaInHashLiteral:
  Enabled: false

# change without benefit ( foobar == nil into foobar.nil?)
Style/NilComparison:
  Enabled: false

# single-quoted strings are worse as adding #{} requires changing ' back into "
Style/StringLiterals:
  Enabled: false

# explicit return make easier to avoid subtle bugs on changing function
Style/RedundantReturn:
  Enabled: false

# sometimes it is necessary to use UTF in comment (especially in cases where some special handling is necessary for nonASCII text) 
Style/AsciiComments:
  Enabled: false

# block comments are fine in my opinion
Style/BlockComments:
  Enabled: false

# overcomplicated syntax without benefit
Style/WordArray:
  Enabled: false

# it is likely to detect bugs, there is no point in masking them by running autocorrect
Lint/UnusedMethodArgument:
  AutoCorrect: False
Lint/UnusedBlockArgument:
  AutoCorrect: False

# see https://github.com/bbatsov/rubocop/issues/1747#issuecomment-223370141
# this auto-correct rule may break things and is not a clear improvement
Style/SpecialGlobalVars:
  Enabled: false

# there is no benefit from ugly code of collapsed form
Style/EmptyMethod:
  EnforcedStyle: expanded

# unconvinced that it is useful
Style/RaiseArgs:
  Enabled: false

# adds useless line without benefit outweighting readability loss
Style/FrozenStringLiteralComment:
  Enabled: false

# Ruby-specific syntax has no benefits whatsover over slashes
# if there is one let me know
Style/RegexpLiteral:
  EnforcedStyle: slashes

# Standard array is much better and less overcomplicated
Style/SymbolArray:
  EnforcedStyle: brackets

# Neither is much better, consistency is much more important
# for example see:
# group = ["#{fish[0]}", "#{fish[0]} filet", "filet z #{fish[1]}"]
# vs
# group = [(fish[0]).to_s, "#{fish[0]} filet", "filet z #{fish[1]}"]
Style/RedundantInterpolation:
  Enabled: false

# local style optimization is better than global consistency
Style/StringLiteralsInInterpolation:
  Enabled: false

# this rubyism is not more readable
Style/NumericPredicate:
  Enabled: false

# this blank lines are neither helpful nor useful
Layout/EmptyLineAfterGuardClause:
  Enabled: false

# not convinced that removing get_ is useful use of my time
Naming/AccessorMethodName:
  Enabled: false

Naming/MethodParameterName:
  AllowedNames:
    - bb # standard shortening of "bounding box"
    - r # standard shortening of "radius"
    - mb # standard for megabytes
    - x # typically perfectly fine for position to a plane
    - "y" # typically perfectly fine for position to a plane

# avoding jumboXXLplus lines is a good idea, but
# there is no reason to stick to 80 characters
# a bit longer lines seems fine to me
Layout/LineLength:
  Max: 88

# benefits from adding ? to the method names are outweighted
# by increased costs of context switch between languages
Naming/PredicateName:
  Enabled: false

# Uncomment following rules to allow using tabs:
#Layout/Tab:
#  Enabled: false

#Layout/IndentationConsistency:
#  Enabled: false

#Layout/IndentationWidth:
#  Enabled: false
